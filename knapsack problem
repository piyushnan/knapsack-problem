#include<iostream>  
#include<vector>  
using namespace std;  
// Function to solve the 0/1 Knapsack problem  
int knapsack(int knapsack_capacity, vector<int>& weights, vector<int>& values) {  
    int num_items = weights.size();  
    vector<vector<int>> dp(num_items + 1, vector<int>(knapsack_capacity + 1, 0));  
    // Fill the dynamic programming table  
    for(int i =1; i <=num_items;++i ){  
        for(int j =1; j <=knapsack_capacity; ++j ) {  
            if( weights[i - 1] <=j ) {  
                // Choose the maximum value between including and excluding the current item  
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i - 1]] + values[i - 1]);  
            } else {  
                // If the current item cannot be included due to its weight  
                dp[i][j] = dp[i - 1][j];  
            }  
        }  
    }  
    // Return the maximum value achievable with the given knapsack capacity  
    return dp[num_items][knapsack_capacity];  
}  
int main(){  
    vector<int> weights ={ 2, 3, 4, 5 };  
    vector<int> values ={ 3, 4, 5, 6 };  
    int knapsack_capacity = 5;  
    // Solve the knapsack problem and get the maximum value  
    int max_value = knapsack(knapsack_capacity, weights, values);  
    // Print the maximum value in the Knapsack  
    cout << "Maximum value in the knapsack: " << max_value << endl;  
    return 0;  
} 
